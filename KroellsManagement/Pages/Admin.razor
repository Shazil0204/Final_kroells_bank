@page "/Admin"
@inject NavigationManager NavigationManager
@inject IJSRuntime runtime;
@namespace KroellsManagement.Classes
@using Microsoft.AspNetCore.Mvc;

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Admin Page</title>
	<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css">
	<link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
	<link rel="stylesheet" href="~/css/site.css">

</head>
<body>

	<div class="divert">
		<button @onclick="GetAccounts" class="button">Accounts</button>
		<button @onclick="GetAddresses" class="button">Addresses</button>
		<button @onclick="GetCards" class="button">Cards</button>
		<button @onclick="GetClients" class="button">Clients</button>
		<button @onclick="GetCprs" class="button">CPRs</button>
		<button @onclick="GetEmployees" class="button">Employees</button>
		<button @onclick="GetJobs" class="button">Jobs</button>
		<button @onclick="GetLoans" class="button">Loans</button>
		<button @onclick="GetTransactions" class="button">Transactions</button>
	</div>

	<div class="editbar">
		<button @onclick="Create" class="button">Create</button>
		<button @onclick="EditLock" class="button">Edit Lock</button>
	</div>
	<div id="Table Container">
	</div>
	<table id="table" class="table table-striped" style="width:100%">
		<thead>
			<tr id="header">
				<th id="header1">1</th>
				<th id="header2">2</th>
				<th id="header3">3</th>
				<th id="header4">4</th>
				<th id="header5">5</th>
				<th id="header6">6</th>
				<th id="header7">7</th>
				<th>Buttons</th>
			</tr>
		</thead>
		<tbody id="tableBody">
			@for (int i = 0; i < currentTable.Count; i++)
			{
				Model.Properties.Current current = (Model.Properties.Current)currentTable[i];

				int id = i;

				<tr>
					<td id="cell1_@i" class="tableContent">@current.One</td>
					<td id="cell2_@i" contenteditable="@_editing" class="tableContent">@current.Two</td>
					<td id="cell3_@i" contenteditable="@_editing" class="tableContent">@current.Three</td>
					<td id="cell4_@i" contenteditable="@_editing" class="tableContent">@current.Four</td>
					<td id="cell5_@i" contenteditable="@_editing" class="tableContent">@current.Five</td>
					<td id="cell6_@i" contenteditable="@_editing" class="tableContent">@current.Six</td>
					<td id="cell7_@i" contenteditable="@_editing" class="tableContent">@current.Seven</td>
					<td><button id="save_@i" @onclick="() => UpdateDatabase(id)" class="button">Save</button><button @onclick="() => Delete(id)" class="button">Delete</button></td>
				</tr>
			}
		</tbody>
		<tfoot>
			<tr id="footer">
				<th id="footer1">1</th>
				<th id="footer2">2</th>
				<th id="footer3">3</th>
				<th id="footer4">4</th>
				<th id="footer5">5</th>
				<th id="footer6">6</th>
				<th id="footer7">7</th>
				<th>Buttons</th>
			</tr>
		</tfoot>
	</table>

</body>
</html>


@code {

	/// <summary>
	/// This first part of the scope has a lot of methods, which gets called by only 1 button, from the user-interface.
	/// Each method identifies a new button, using the button object, and gives the button a name.
	/// Once the button has a name, it calls the ButtonController class, which needs 2 parameters.
	/// It needs to know the button and a boolean value if its editing or not.
	///
	/// Editing refers to the creating and deleting tables.
	///
	/// The EditLock button is a bit different, because it doesnt need to be identified and it has its own method in the ButtonController class.
	/// </summary>

	//String to keep track of the currently displayed table
	private string _currentDisplay = "";

	Model.Database database = new Model.Database();

	private void GetAccounts()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Accounts";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetAddresses()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Addresses";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetCards()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Cards";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetClients()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Clients";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetCprs()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "CPRs";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetEmployees()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Employees";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetJobs()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Jobs";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetLoans()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Loans";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private void GetTransactions()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Transactions";
		_currentDisplay = button.ButtonName;
		CallJS(button.ButtonName);
		controller.TableHandler(button);
		ConvertToRow(database.GetTable(button.ButtonName));
	}

	private int _id;

	private async Task Delete(int rowId)
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Delete";
		controller.TableHandler(button);

		string cellContent = "";
		cellContent = await runtime.InvokeAsync<string>("getContentFromCell", $"cell{1}_{rowId}");

		// deletes the row in the database
		database.DeleteData(cellContent, _currentDisplay);

		// Calls the ClearTable function to remove all rows currently displayed in the HTML table.
		await runtime.InvokeVoidAsync("ClearTable")
		;

		// Gets data from the database and converts it to rows, for the HTML table.
		ConvertToRow(database.GetTable(_currentDisplay));

	}

	/// <summary>
	/// This method takes a parameter of the row id, to determine which row has to be updated.
	/// Then it goes through each of the elements in the row and updates them to the database.
	/// </summary>
	/// <param name="rowValue"></param>
	/// <returns></returns>
	private async Task UpdateDatabase(int rowId)
	{
		string[] cellContent = new string[7];
		for (int i = 0; i < cellContent.Length; i++)
		{
			cellContent[i] = await runtime.InvokeAsync<string>("getContentFromCell", $"cell{i}_{rowId}");
		}

		string storedProcedure = "";

		switch (_currentDisplay)
		{
			case "Accounts":
				storedProcedure = $"EXEC UPDATEACCOUNT @ACCOUNT_ID = {cellContent[0]}, @BALANCE = {cellContent[1]}, @CARD_ID = {cellContent[2]};";
				break;
			case "Addresses":
				storedProcedure = $"EXEC UPDATEADDRESS @ADDRESS_ID = {cellContent[0]}, @ZIP_CODE = {cellContent[1]}, @CITY = {cellContent[2]}, @STREET = {cellContent[3]}, @HOUSE_NR = {cellContent[4]};";
				break;
			case "Cards":
				storedProcedure = $"EXEC UPDATECARDS @CARD_ID = {cellContent[0]}, @CARD_NR = {cellContent[1]}, @EXPIRE_DATE = {cellContent[2]}, @CVV = {cellContent[3]}, @CLIENT_NAME = {cellContent[4]}, @PIN = {cellContent[5]}, @SPENDING_LIMIT = {cellContent[6]};";
				break;
			case "Clients":
				storedProcedure = $"EXEC UPDATECLIENT @CLIENT_ID = {cellContent[0]}, @CLIENT_NAME = {cellContent[1]}, @USERNAME = {cellContent[2]}, @PASSWORDHASHED = {cellContent[3]};";
				break;
			case "CPRs":
				storedProcedure = $"EXEC UPDATECPR @CPR_ID = {cellContent[0]}, @CLIENT_ID = {cellContent[1]}, @ADDRESS_ID = {cellContent[2]}, @EMPLOYEE_ID = {cellContent[3]}, @CPR_NR = {cellContent[4]};";
				break;
			case "Employees":
				storedProcedure = $"EXEC UPDATEEMPLOYEE @EMPLOYEE_ID = {cellContent[0]}, @POSITION = {cellContent[1]} , @USERNAME = {cellContent[2]}, @PASSWORDHASHED = {cellContent[3]};";
				break;
			case "Jobs":
				storedProcedure = $"EXEC UPDATEJOB @JOB_ID = {cellContent[0]}, @INCOME = {cellContent[1]}, @JOB_NAME = {cellContent[2]};";
				break;
			case "Loans":
				storedProcedure = $"EXEC UPDATELOAN @LOAN_ID = {cellContent[0]}, @CLIENT_ID = {cellContent[1]}, @APR = {cellContent[2]}, @AMOUNT = {cellContent[3]};";
				break;
			case "Transactions":
				storedProcedure = $"EXEC UPDATETRANSACTION @TRANSACTION_ID = {cellContent[0]}, @AMOUNT = {cellContent[1]}, @DATE_TIME = {cellContent[2]}, @ACCOUNT_ID = {cellContent[3]};";
				break;
		}


	}




	// Creates a boolean variable to keep track of the current edit state.
	private bool _editing;

	Controllers.ButtonController controller = new Controllers.ButtonController();

	private void EditLock()
	{
		// Changes the edit state, inside the ButtonController
		_editing = controller.EditLock(_editing);
	}

	/// <summary>
	///
	/// </summary>

	private List<Model.TableBlueprint> currentTable = new List<Model.TableBlueprint>();
	/// <summary>
	/// This method calls a javascript function, to delete the shown table
	/// </summary>
	private async Task CallJS(string button)
	{
		await runtime.InvokeVoidAsync("Entry", button);
		//await runtime.InvokeVoidAsync("DeleteAll");
	}

	private async Task Create()
	{
		//await runtime.InvokeVoidAsync("AddRow");
		Model.Database createNewQuery = new Model.Database();
		createNewQuery.CreateTable(_currentDisplay);
	}

	private void ConvertToRow(List<string[]> data)
	{

		foreach (string[] array in data)
		{
			Model.Properties.Current current = new();

			byte length = (byte)array.Length;

			current.One = array[0];
			current.Two = array[1];
			current.Three = array[2];

			if (length > 3)
			{
				current.Four = array[3];

				if (length > 4)
				{
					current.Five = array[4];

					if (length > 5)
					{
						current.Six = array[5];

						if (length > 6)
						{
							current.Seven = array[6];
						}
					}
				}
			}

			currentTable.Add(current);
		}
	}
}
