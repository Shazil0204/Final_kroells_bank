@page "/Admin"
@inject NavigationManager NavigationManager
@inject IJSRuntime runtime;
@namespace KroellsManagement.Classes

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Admin Page</title>
	<link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css">
	<link href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
	<link rel="stylesheet" href="~/css/site.css">

</head>
<body>

	<div class="divert">
		<button onclick="updateTable(['Account ID', 'Balance', 'Card ID', '', '', '', '']); GetAccounts();" class="button">Accounts</button>
		<button onclick="updateTable(['Postal code', 'City', 'Street', 'House Number', '', '', '']); GetAddresses();" class="button">Addresses</button>
		<button onclick="updateTable(['Card Number', 'Expire Date', 'CVV', 'Client Name', 'Pin', 'Spendig', '']); GetCards();" class="button">Cards</button>
		<button onclick="updateTable(['Client Name', 'Username', 'Password Hashed', '', '', '', '']); GetClients();" class="button">Clients</button>
		<button onclick="updateTable(['Client ID', 'AdressID', 'EmployeeID', 'CPR Number', '', '', '']); GetCprs();" class="button">CPRs</button>
		<button onclick="updateTable(['Position', 'Username', 'Password Hashed', '', '', '', '']); GetEmployees();" class="button">Employees</button>
		<button onclick="updateTable(['Income', 'Job Name', '', '', '', '', '']); GetJobs();" class="button">Jobs</button>
		<button onclick="updateTable(['Client ID', 'APR ', 'Amount', '', '', '', '']); GetLoans();" class="button">Loans</button>
		<button onclick="updateTable(['Account ID', 'Amount', 'Date', '', '', '', '']); GetTransactions();" class="button">Transactions</button>
	</div>



	<div class="editbar">
		<button @onclick="Create" class="button">Create</button>
		<button @onclick="EditLock" class="button">Edit Lock</button>
	</div>
	<div id="Table Container">
	</div>
	<table id="table" class="table table-striped" style="width:100%">
		<thead>
			<tr id="header">
				<th>1</th>
				<th>2</th>
				<th>3</th>
				<th>4</th>
				<th>5</th>
				<th>6</th>
				<th>7</th>
				<th>8</th>
			</tr>
		</thead>
		<tbody id="tableBody">
			<tr>
				<td contenteditable="@_editing" class="ta-bleContent">1</td>
				<td contenteditable="@_editing" class="tableContent">$1,000.00</td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td><button @onclick="Delete" class="button" id="table">Delete</button></td>

			</tr>
			<tr>
				<td contenteditable="@_editing" class="tableContent">2</td>
				<td contenteditable="@_editing" class="tableContent">$500.00</td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td contenteditable="@_editing" class="tableContent"></td>
				<td><button @onclick="Delete" class="button" id="table">Delete</button></td>

			</tr>
			@foreach (Model.Properties.Current table in currentTable)
			{
				<tr>
					<td contenteditable="@_editing" class="tableContent">@table.One</td>
					<td contenteditable="@_editing" class="tableContent">@table.Two</td>
					<td contenteditable="@_editing" class="tableContent">@table.Three</td>
					<td contenteditable="@_editing" class="tableContent">@table.Four</td>
					<td contenteditable="@_editing" class="tableContent">@table.Five</td>
					<td contenteditable="@_editing" class="tableContent">@table.Six</td>
					<td contenteditable="@_editing" class="tableContent">@table.Seven</td>
					<td><button @onclick="Delete" class="button">Delete</button></td>
				</tr>

			}
		</tbody>
		<tfoot>
			<tr id="footer">
				<th>1</th>
				<th>2</th>
				<th>3</th>
				<th>4</th>
				<th>5</th>
				<th>6</th>
				<th>7</th>
				<th>8</th>
			</tr>
		</tfoot>
	</table>

</body>
</html>


@code {

	/// <summary>
	/// This first part of the scope has a lot of methods, which gets called by only 1 button, from the user-interface.
	/// Each method identifies a new button, using the button object, and gives the button a name.
	/// Once the button has a name, it calls the ButtonController class, which needs 2 parameters.
	/// It needs to know the button and a boolean value if its editing or not.
	///
	/// Editing refers to the creating and deleting tables.
	///
	/// The EditLock button is a bit different, because it doesnt need to be identified and it has its own method in the ButtonController class.
	/// </summary>


	Controllers.ButtonController controller = new Controllers.ButtonController();

	private void GetAccounts()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Accounts";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetAddresses()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Addresses";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetCards()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Cards";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetClients()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Clients";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetCprs()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "CPRs";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetEmployees()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Employees";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetJobs()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Jobs";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetLoans()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Loans";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void GetTransactions()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Transactions";
		CallJS();
		controller.TableHandler(button, false);
	}

	private void Delete()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Delete";
		controller.TableHandler(button, true);
	}

	private void Create()
	{
		Model.Properties.Button button = new Model.Properties.Button();
		button.ButtonName = "Create";
		controller.TableHandler(button, true);
	}

	// Creates a boolean variable to keep track of the current edit state.
	private bool _editing;

	private void EditLock()
	{
		// Changes the edit state, inside the ButtonController
		_editing = controller.EditLock(_editing);
	}

	/// <summary>
	///
	/// </summary>

	private List<Model.TableBlueprint> currentTable = new List<Model.TableBlueprint>();

	private List<Model.Properties.Account> accounts = new List<Model.Properties.Account>();
	private List<Model.Properties.Address> addresses = new List<Model.Properties.Address>();
	private List<Model.Properties.Card> cards = new List<Model.Properties.Card>();
	private List<Model.Properties.Client> clients = new List<Model.Properties.Client>();
	private List<Model.Properties.Cpr> cprs = new List<Model.Properties.Cpr>();
	private List<Model.Properties.Employee> employees = new List<Model.Properties.Employee>();
	private List<Model.Properties.Job> jobs = new List<Model.Properties.Job>();
	private List<Model.Properties.Loan> loans = new List<Model.Properties.Loan>();
	private List<Model.Properties.Transaction> transactions = new List<Model.Properties.Transaction>();

	/// <summary>
	/// This method calls a javascript function, to delete the shown table
	/// </summary>
	private async Task CallJS()
	{
		await runtime.InvokeVoidAsync("DeleteAll");
	}
}
	